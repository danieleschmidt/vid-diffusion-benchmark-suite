# Continuous Deployment Pipeline for Video Diffusion Benchmark Suite
# Copy this file to .github/workflows/cd.yml

name: CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Push Images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # Security Scan of Built Image
  security-scan:
    name: Security Scan Built Image
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.vid-benchmark.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Deploy to ECS Staging
      run: |
        # Update ECS service with new image
        aws ecs update-service \
          --cluster vid-benchmark-staging \
          --service vid-benchmark-api \
          --task-definition vid-benchmark-staging:${{ github.run_number }} \
          --force-new-deployment

        # Wait for deployment to complete
        aws ecs wait services-stable \
          --cluster vid-benchmark-staging \
          --services vid-benchmark-api

    - name: Run smoke tests
      run: |
        # Wait for service to be ready
        sleep 60
        
        # Basic health check
        curl -f https://staging.vid-benchmark.com/health
        
        # Run critical path tests
        pytest tests/smoke/ --base-url=https://staging.vid-benchmark.com

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "ðŸš€ Staging deployment successful",
            attachments: [{
              color: "good",
              fields: [{
                title: "Environment",
                value: "Staging",
                short: true
              }, {
                title: "Version",
                value: "${{ github.sha }}",
                short: true
              }, {
                title: "URL",
                value: "https://staging.vid-benchmark.com",
                short: false
              }]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://vid-benchmark.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Create deployment backup
      run: |
        # Backup current task definition
        aws ecs describe-task-definition \
          --task-definition vid-benchmark-production \
          --query 'taskDefinition' > backup-task-def.json

    - name: Deploy to ECS Production (Blue-Green)
      run: |
        # Deploy with blue-green strategy
        aws ecs update-service \
          --cluster vid-benchmark-production \
          --service vid-benchmark-api \
          --task-definition vid-benchmark-production:${{ github.run_number }} \
          --deployment-configuration "maximumPercent=200,minimumHealthyPercent=50"

        # Wait for deployment to complete
        aws ecs wait services-stable \
          --cluster vid-benchmark-production \
          --services vid-benchmark-api

    - name: Run production smoke tests
      run: |
        # Wait for service to be ready
        sleep 120
        
        # Comprehensive health checks
        curl -f https://vid-benchmark.com/health
        curl -f https://vid-benchmark.com/metrics
        
        # Run production smoke tests
        pytest tests/smoke/ --base-url=https://vid-benchmark.com --production

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, rolling back..."
        aws ecs update-service \
          --cluster vid-benchmark-production \
          --service vid-benchmark-api \
          --task-definition backup-task-def.json \
          --force-new-deployment

    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "ðŸŽ‰ Production deployment successful",
            attachments: [{
              color: "good",
              fields: [{
                title: "Environment",
                value: "Production",
                short: true
              }, {
                title: "Version",
                value: "${{ github.ref_name }}",
                short: true
              }, {
                title: "URL",
                value: "https://vid-benchmark.com",
                short: false
              }]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Update Documentation
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"

    - name: Build documentation
      run: mkdocs build

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        cname: docs.vid-benchmark.com

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits
        previous_tag=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$previous_tag" ]; then
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s (%h)" ${previous_tag}..HEAD >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "CHANGELOG=Initial release" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Changes in this Release
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Docker Images
          - `ghcr.io/${{ github.repository }}:${{ github.ref_name }}`
          - `ghcr.io/${{ github.repository }}:latest`
          
          ## Deployment
          This release has been automatically deployed to production.
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  # Post-deployment monitoring
  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && (startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production')
    steps:
    - name: Monitor deployment health
      run: |
        # Monitor for 10 minutes after deployment
        for i in {1..20}; do
          echo "Health check $i/20"
          
          # Check API health
          if ! curl -f https://vid-benchmark.com/health; then
            echo "Health check failed!"
            exit 1
          fi
          
          # Check error rates
          error_rate=$(curl -s https://vid-benchmark.com/metrics | grep error_rate | awk '{print $2}')
          if (( $(echo "$error_rate > 0.05" | bc -l) )); then
            echo "Error rate too high: $error_rate"
            exit 1
          fi
          
          sleep 30
        done

    - name: Alert on monitoring failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "ðŸš¨ Post-deployment monitoring detected issues",
            attachments: [{
              color: "danger",
              fields: [{
                title: "Environment",
                value: "Production",
                short: true
              }, {
                title: "Action Required",
                value: "Immediate investigation needed",
                short: true
              }]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}