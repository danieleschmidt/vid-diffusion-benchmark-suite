# Production Docker Compose for Video Diffusion Benchmark Suite
# Scalable, fault-tolerant deployment with monitoring and persistence

version: '3.8'

networks:
  benchmark_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  models_cache:
    driver: local
  benchmark_results:
    driver: local

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: benchmark_postgres
    environment:
      POSTGRES_DB: vid_benchmark
      POSTGRES_USER: ${POSTGRES_USER:-benchmark}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-benchmark_pass}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - benchmark_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-benchmark}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: benchmark_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_pass}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - benchmark_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Server
  api_server:
    build:
      context: ..
      dockerfile: deployment/production.dockerfile
      target: api-server
    container_name: benchmark_api
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-benchmark}:${POSTGRES_PASSWORD:-benchmark_pass}@postgres:5432/vid_benchmark
      - REDIS_URL=redis://default:${REDIS_PASSWORD:-redis_pass}@redis:6379/0
      - API_SECRET_KEY=${API_SECRET_KEY:-your-secret-key}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - models_cache:/app/models:rw
      - benchmark_results:/app/results:rw
      - ./deployment/config:/app/config:ro
    ports:
      - "${API_PORT:-8000}:8000"
    networks:
      - benchmark_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Distributed Workers (GPU-enabled)
  worker_gpu:
    build:
      context: ..
      dockerfile: deployment/production.dockerfile
      target: worker
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-benchmark}:${POSTGRES_PASSWORD:-benchmark_pass}@postgres:5432/vid_benchmark
      - REDIS_URL=redis://default:${REDIS_PASSWORD:-redis_pass}@redis:6379/0
      - WORKER_TYPE=gpu_worker
      - CUDA_VISIBLE_DEVICES=all
    volumes:
      - models_cache:/app/models:rw
      - benchmark_results:/app/results:rw
    networks:
      - benchmark_network
    depends_on:
      - postgres
      - redis
      - api_server
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '4.0'
          memory: 16G
        reservations:
          cpus: '2.0'
          memory: 8G
      # GPU support - uncomment if NVIDIA Docker runtime is available
      # resources:
      #   reservations:
      #     devices:
      #       - driver: nvidia
      #         count: 1
      #         capabilities: [gpu]

  # CPU-only Workers
  worker_cpu:
    build:
      context: ..
      dockerfile: deployment/production.dockerfile
      target: worker
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-benchmark}:${POSTGRES_PASSWORD:-benchmark_pass}@postgres:5432/vid_benchmark
      - REDIS_URL=redis://default:${REDIS_PASSWORD:-redis_pass}@redis:6379/0
      - WORKER_TYPE=cpu_worker
      - CUDA_VISIBLE_DEVICES=""
    volumes:
      - models_cache:/app/models:rw
      - benchmark_results:/app/results:rw
    networks:
      - benchmark_network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    deploy:
      replicas: 4
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: benchmark_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - benchmark_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: benchmark_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json
      - ./monitoring/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - benchmark_network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Monitoring Service
  monitor:
    build:
      context: ..
      dockerfile: deployment/production.dockerfile
      target: monitor
    container_name: benchmark_monitor
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-benchmark}:${POSTGRES_PASSWORD:-benchmark_pass}@postgres:5432/vid_benchmark
      - REDIS_URL=redis://default:${REDIS_PASSWORD:-redis_pass}@redis:6379/0
      - GRAFANA_URL=http://grafana:3000
      - PROMETHEUS_URL=http://prometheus:9090
    volumes:
      - benchmark_results:/app/results:ro
    networks:
      - benchmark_network
    depends_on:
      - postgres
      - redis
      - prometheus
      - grafana
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Load Balancer (Nginx)
  nginx:
    image: nginx:alpine
    container_name: benchmark_nginx
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    networks:
      - benchmark_network
    depends_on:
      - api_server
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Model Downloader Service (Init container)
  model_downloader:
    build:
      context: ..
      dockerfile: deployment/production.dockerfile
      target: production
    container_name: benchmark_model_downloader
    environment:
      - MODEL_CACHE_DIR=/app/models
      - HF_HOME=/app/models/.cache
    volumes:
      - models_cache:/app/models:rw
    networks:
      - benchmark_network
    restart: "no"
    command: ["python3", "-m", "vid_diffusion_bench.models.download_models", "--all"]
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 4G

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: benchmark_backup
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=vid_benchmark
      - POSTGRES_USER=${POSTGRES_USER:-benchmark}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-benchmark_pass}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}  # Daily at 2 AM
    volumes:
      - benchmark_results:/backups:rw
      - ./deployment/backup.sh:/backup.sh:ro
    networks:
      - benchmark_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    command: ["crond", "-f"]
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M